"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/reports";
exports.ids = ["pages/api/reports"];
exports.modules = {

/***/ "(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Freports&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Creports.js&middlewareConfigBase64=e30%3D!":
/*!********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Freports&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Creports.js&middlewareConfigBase64=e30%3D! ***!
  \********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/pages-api/module.compiled */ \"(api-node)/./node_modules/next/dist/server/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(api-node)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api-node)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_reports_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\reports.js */ \"(api-node)/./pages/api/reports.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_reports_js__WEBPACK_IMPORTED_MODULE_3__, 'default'));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_reports_js__WEBPACK_IMPORTED_MODULE_3__, 'config');\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/reports\",\n        pathname: \"/api/reports\",\n        // The following aren't used in production.\n        bundlePath: '',\n        filename: ''\n    },\n    userland: _pages_api_reports_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL25vZGVfbW9kdWxlcy9uZXh0L2Rpc3QvYnVpbGQvd2VicGFjay9sb2FkZXJzL25leHQtcm91dGUtbG9hZGVyL2luZGV4LmpzP2tpbmQ9UEFHRVNfQVBJJnBhZ2U9JTJGYXBpJTJGcmVwb3J0cyZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTVDYXBpJTVDcmVwb3J0cy5qcyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBK0Y7QUFDdkM7QUFDRTtBQUMxRDtBQUNxRDtBQUNyRDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsa0RBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLGtEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLHlHQUFtQjtBQUNsRDtBQUNBLGNBQWMsa0VBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXNcXFxcYXBpXFxcXHJlcG9ydHMuanNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgJ2RlZmF1bHQnKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsICdjb25maWcnKTtcbi8vIENyZWF0ZSBhbmQgZXhwb3J0IHRoZSByb3V0ZSBtb2R1bGUgdGhhdCB3aWxsIGJlIGNvbnN1bWVkLlxuZXhwb3J0IGNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IFBhZ2VzQVBJUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLlBBR0VTX0FQSSxcbiAgICAgICAgcGFnZTogXCIvYXBpL3JlcG9ydHNcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9yZXBvcnRzXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogJycsXG4gICAgICAgIGZpbGVuYW1lOiAnJ1xuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Freports&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Creports.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api-node)/./pages/api/_helpers.js":
/*!*******************************!*\
  !*** ./pages/api/_helpers.js ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   handleApiError: () => (/* binding */ handleApiError),\n/* harmony export */   mockData: () => (/* binding */ mockData)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n/**\r\n * Helper function to handle API errors and return mock data with status info\r\n * @param {Error} error - The error that occurred\r\n * @param {Array} mockData - Mock data to return as fallback\r\n * @param {string} source - Short description of the error source\r\n * @returns {Object} - Response object with mock data and status info\r\n */\nfunction handleApiError(_x, _x2) {\n  return _handleApiError.apply(this, arguments);\n}\n\n/**\r\n * Common mock data for different API endpoints\r\n */\nfunction _handleApiError() {\n  _handleApiError = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(error, mockData) {\n    var source,\n      dbStatus,\n      healthResponse,\n      healthData,\n      _args = arguments;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          source = _args.length > 2 && _args[2] !== undefined ? _args[2] : 'API Error';\n          console.error(\"Error in \".concat(source, \":\"), error);\n\n          // Get database status from health endpoint\n          dbStatus = 'unknown';\n          _context.prev = 3;\n          _context.next = 6;\n          return fetch(\"\".concat(process.env.API_BASE_URL || 'http://localhost:8080', \"/api/health\"));\n        case 6:\n          healthResponse = _context.sent;\n          if (!healthResponse.ok) {\n            _context.next = 12;\n            break;\n          }\n          _context.next = 10;\n          return healthResponse.json();\n        case 10:\n          healthData = _context.sent;\n          dbStatus = healthData.database || 'unknown';\n        case 12:\n          _context.next = 17;\n          break;\n        case 14:\n          _context.prev = 14;\n          _context.t0 = _context[\"catch\"](3);\n          console.error('Could not check database status:', _context.t0);\n        case 17:\n          return _context.abrupt(\"return\", {\n            success: true,\n            data: mockData,\n            source: 'mock',\n            database_status: dbStatus,\n            message: 'Using mock data - Database connection is unavailable'\n          });\n        case 18:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[3, 14]]);\n  }));\n  return _handleApiError.apply(this, arguments);\n}\nvar mockData = {\n  invoices: [{\n    id: 1,\n    client_name: 'Acme Corp',\n    amount: '1500.00',\n    status: 'paid',\n    due_date: '2023-08-15'\n  }, {\n    id: 2,\n    client_name: 'Globex Inc',\n    amount: '2450.00',\n    status: 'unpaid',\n    due_date: '2023-09-01'\n  }, {\n    id: 3,\n    client_name: 'Stark Industries',\n    amount: '3200.00',\n    status: 'paid',\n    due_date: '2023-08-20'\n  }, {\n    id: 4,\n    client_name: 'Wayne Enterprises',\n    amount: '1800.00',\n    status: 'overdue',\n    due_date: '2023-08-10'\n  }, {\n    id: 5,\n    client_name: 'Oscorp',\n    amount: '950.00',\n    status: 'unpaid',\n    due_date: '2023-09-05'\n  }],\n  expenses: [{\n    id: 1,\n    category: 'Office Supplies',\n    amount: '250.00',\n    date: '2023-07-25',\n    vendor: 'Office Depot'\n  }, {\n    id: 2,\n    category: 'Travel',\n    amount: '850.00',\n    date: '2023-08-03',\n    vendor: 'Delta Airlines'\n  }, {\n    id: 3,\n    category: 'Software',\n    amount: '120.00',\n    date: '2023-08-10',\n    vendor: 'Adobe'\n  }, {\n    id: 4,\n    category: 'Meals',\n    amount: '75.00',\n    date: '2023-08-15',\n    vendor: 'Restaurant'\n  }, {\n    id: 5,\n    category: 'Hardware',\n    amount: '1200.00',\n    date: '2023-08-20',\n    vendor: 'Apple'\n  }],\n  clients: [{\n    id: 1,\n    name: 'Acme Corporation',\n    email: 'contact@acme.com',\n    phone: '555-123-4567'\n  }, {\n    id: 2,\n    name: 'Globex Inc',\n    email: 'info@globex.com',\n    phone: '555-987-6543'\n  }, {\n    id: 3,\n    name: 'Stark Industries',\n    email: 'sales@stark.com',\n    phone: '555-467-8901'\n  }, {\n    id: 4,\n    name: 'Wayne Enterprises',\n    email: 'info@wayne.com',\n    phone: '555-234-5678'\n  }, {\n    id: 5,\n    name: 'Oscorp',\n    email: 'contact@oscorp.com',\n    phone: '555-345-6789'\n  }],\n  reports: {\n    income: [{\n      month: 'Jan',\n      amount: 4500\n    }, {\n      month: 'Feb',\n      amount: 5200\n    }, {\n      month: 'Mar',\n      amount: 4800\n    }, {\n      month: 'Apr',\n      amount: 5800\n    }, {\n      month: 'May',\n      amount: 6200\n    }, {\n      month: 'Jun',\n      amount: 5600\n    }, {\n      month: 'Jul',\n      amount: 6800\n    }, {\n      month: 'Aug',\n      amount: 7200\n    }, {\n      month: 'Sep',\n      amount: 6400\n    }, {\n      month: 'Oct',\n      amount: 7500\n    }, {\n      month: 'Nov',\n      amount: 8200\n    }, {\n      month: 'Dec',\n      amount: 9000\n    }],\n    expenses: [{\n      month: 'Jan',\n      amount: 2200\n    }, {\n      month: 'Feb',\n      amount: 2400\n    }, {\n      month: 'Mar',\n      amount: 2100\n    }, {\n      month: 'Apr',\n      amount: 2600\n    }, {\n      month: 'May',\n      amount: 2800\n    }, {\n      month: 'Jun',\n      amount: 2500\n    }, {\n      month: 'Jul',\n      amount: 3000\n    }, {\n      month: 'Aug',\n      amount: 3200\n    }, {\n      month: 'Sep',\n      amount: 2900\n    }, {\n      month: 'Oct',\n      amount: 3400\n    }, {\n      month: 'Nov',\n      amount: 3600\n    }, {\n      month: 'Dec',\n      amount: 3800\n    }]\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/_helpers.js\n");

/***/ }),

/***/ "(api-node)/./pages/api/reports.js":
/*!******************************!*\
  !*** ./pages/api/reports.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./_helpers */ \"(api-node)/./pages/api/_helpers.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it[\"return\"] != null) it[\"return\"](); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n// Next.js API route for reports - proxies to Express server\n\nfunction handler(_x, _x2) {\n  return _handler.apply(this, arguments);\n}\nfunction _handler() {\n  _handler = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(req, res) {\n    var data, mongodb, db, collections, _req$query, _req$query$timeframe, timeframe, startDate, endDate, category, start, end, now, quarter, getCollection, invoicesCollection, expensesCollection, clientsCollection, transactionsCollection, useTransactionsForAll, safelyMatchDates, sampleData, determineFields, dateField, amountField, typeField, statusField, categoryField, clientField, revenueTypes, expenseTypes, revenueByMonth, sampleRevenue, collection, monthOrder, existingMonths, monthsInData, startMonthIndex, endMonthIndex, completeRevenueData, i, month, expensesByCategory, categoryMatch, profitLoss, monthlyTransactions, revenueByMonthMap, expensesByMonthArray, expensesByMonthMap, months, topClients, clientNameSample, clientIdSample, _clientsCollection, possibleClientFields, fieldToUse, _iterator3, _step3, field, sampleDoc, availableCategories, categoryCollection;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.prev = 1;\n          // Connect to MongoDB directly to avoid additional express server overhead\n          mongodb = __webpack_require__(/*! ../../src/server/database/mongodb-config */ \"(api-node)/./src/server/database/mongodb-config.js\");\n          _context.next = 5;\n          return mongodb.getDb();\n        case 5:\n          db = _context.sent;\n          if (mongodb.getConnectionStatus()) {\n            _context.next = 8;\n            break;\n          }\n          throw new Error('MongoDB connection failed');\n        case 8:\n          _context.next = 10;\n          return db.listCollections().toArray();\n        case 10:\n          collections = _context.sent;\n          console.log('Available collections:', collections.map(function (c) {\n            return c.name;\n          }));\n\n          // Get the query parameters\n          _req$query = req.query, _req$query$timeframe = _req$query.timeframe, timeframe = _req$query$timeframe === void 0 ? 'month' : _req$query$timeframe, startDate = _req$query.startDate, endDate = _req$query.endDate, category = _req$query.category; // Calculate date range based on parameters\n          if (startDate && endDate) {\n            // Use custom date range if provided\n            start = new Date(startDate);\n            end = new Date(endDate);\n\n            // Set end time to the end of the day\n            end.setHours(23, 59, 59, 999);\n          } else {\n            // Calculate based on timeframe\n            now = new Date();\n            if (timeframe === 'month') {\n              // Use current month of current year\n              start = new Date(now.getFullYear(), now.getMonth(), 1);\n              end = new Date(now.getFullYear(), now.getMonth() + 1, 0, 23, 59, 59, 999);\n            } else if (timeframe === 'quarter') {\n              // Use current quarter of current year\n              quarter = Math.floor(now.getMonth() / 3);\n              start = new Date(now.getFullYear(), quarter * 3, 1);\n              end = new Date(now.getFullYear(), quarter * 3 + 3, 0, 23, 59, 59, 999);\n            } else if (timeframe === 'year') {\n              // Use current year\n              start = new Date(now.getFullYear(), 0, 1);\n              end = new Date(now.getFullYear(), 11, 31, 23, 59, 59, 999);\n            } else if (timeframe === 'all_time') {\n              // Use a wide date range to include all historical data\n              start = new Date(2000, 0, 1); // Start from year 2000\n              end = new Date(); // Current date\n            } else {\n              // Default to all historical data\n              start = new Date(2000, 0, 1); // Start from year 2000\n              end = new Date(); // Current date\n            }\n          }\n\n          // Ensure dates are valid\n          if (!(isNaN(start.getTime()) || isNaN(end.getTime()))) {\n            _context.next = 16;\n            break;\n          }\n          throw new Error('Invalid date range');\n        case 16:\n          console.log('Date range:', {\n            startDate: start.toISOString(),\n            endDate: end.toISOString(),\n            timeframe: timeframe,\n            category: category\n          });\n\n          // Check for available collections and use appropriate ones\n          // Get collection references - check for plural and singular forms\n          getCollection = function getCollection(names) {\n            var _iterator = _createForOfIteratorHelper(names),\n              _step;\n            try {\n              var _loop = function _loop() {\n                  var name = _step.value;\n                  if (collections.some(function (c) {\n                    return c.name === name;\n                  })) {\n                    return {\n                      v: db.collection(name)\n                    };\n                  }\n                },\n                _ret;\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                _ret = _loop();\n                if (_ret) return _ret.v;\n              }\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n            return null;\n          };\n          invoicesCollection = getCollection(['invoices', 'invoice', 'transactions']);\n          expensesCollection = getCollection(['expenses', 'expense', 'transactions']);\n          clientsCollection = getCollection(['clients', 'client', 'customers', 'customer']);\n          transactionsCollection = getCollection(['transactions', 'transaction']); // Log collection availability\n          console.log('Collections found:', {\n            invoices: !!invoicesCollection,\n            expenses: !!expensesCollection,\n            clients: !!clientsCollection,\n            transactions: !!transactionsCollection\n          });\n\n          // Check if we're missing critical collections\n          if (!(!invoicesCollection && !transactionsCollection)) {\n            _context.next = 25;\n            break;\n          }\n          throw new Error('No transaction or invoice collections found in database');\n        case 25:\n          // If we have a transactions collection instead of separate invoices/expenses,\n          // we need to use it for both revenue and expenses\n          useTransactionsForAll = !invoicesCollection || !expensesCollection; // Helper function to safely parse dates in MongoDB\n          safelyMatchDates = function safelyMatchDates(dateField) {\n            return {\n              $expr: {\n                $and: [{\n                  $gte: [{\n                    $ifNull: [{\n                      $toDate: \"$\".concat(dateField)\n                    }, new Date(0)]\n                  }, start]\n                }, {\n                  $lte: [{\n                    $ifNull: [{\n                      $toDate: \"$\".concat(dateField)\n                    }, new Date(0)]\n                  }, end]\n                }]\n              }\n            };\n          }; // Run a sample query to check data structure\n          sampleData = [];\n          if (!transactionsCollection) {\n            _context.next = 35;\n            break;\n          }\n          _context.next = 31;\n          return transactionsCollection.find().limit(5).toArray();\n        case 31:\n          sampleData = _context.sent;\n          console.log('Sample transaction data:', sampleData);\n          _context.next = 40;\n          break;\n        case 35:\n          if (!invoicesCollection) {\n            _context.next = 40;\n            break;\n          }\n          _context.next = 38;\n          return invoicesCollection.find().limit(5).toArray();\n        case 38:\n          sampleData = _context.sent;\n          console.log('Sample invoice data:', sampleData);\n        case 40:\n          // Dynamically determine field names based on sample data\n          determineFields = function determineFields(sampleData, possibleFields) {\n            if (!sampleData || sampleData.length === 0) return possibleFields[0];\n            var _iterator2 = _createForOfIteratorHelper(possibleFields),\n              _step2;\n            try {\n              var _loop2 = function _loop2() {\n                  var field = _step2.value;\n                  if (sampleData.some(function (item) {\n                    return item[field] !== undefined;\n                  })) {\n                    return {\n                      v: field\n                    };\n                  }\n                },\n                _ret2;\n              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n                _ret2 = _loop2();\n                if (_ret2) return _ret2.v;\n              }\n            } catch (err) {\n              _iterator2.e(err);\n            } finally {\n              _iterator2.f();\n            }\n            return possibleFields[0];\n          }; // Determine field names from sample data\n          dateField = determineFields(sampleData, ['date', 'payment_date', 'transaction_date', 'createdAt']);\n          amountField = determineFields(sampleData, ['amount', 'value', 'total', 'sum']);\n          typeField = determineFields(sampleData, ['type', 'transaction_type', 'category', 'transactionType']);\n          statusField = determineFields(sampleData, ['status', 'payment_status', 'paymentStatus']);\n          categoryField = determineFields(sampleData, ['category', 'type', 'expense_category', 'expenseCategory']);\n          clientField = determineFields(sampleData, ['client_name', 'clientName', 'customer', 'payee', 'recipient', 'notes', 'description']);\n          console.log('Determined fields:', {\n            dateField: dateField,\n            amountField: amountField,\n            typeField: typeField,\n            statusField: statusField,\n            categoryField: categoryField,\n            clientField: clientField\n          });\n\n          // Define revenue and expense type identifiers based on the data structure\n          revenueTypes = ['income', 'revenue', 'sale', 'payment', 'paid', 'inflow', 'credit'];\n          expenseTypes = ['expense', 'cost', 'bill', 'payment_out', 'outflow', 'debit']; // Improve console logging for debugging\n          console.log('API Query Parameters:', {\n            timeframe: timeframe,\n            startDate: start.toISOString(),\n            endDate: end.toISOString(),\n            categoryFilter: category,\n            fieldNames: {\n              dateField: dateField,\n              amountField: amountField,\n              typeField: typeField,\n              statusField: statusField,\n              categoryField: categoryField,\n              clientField: clientField\n            },\n            collectionsAvailable: {\n              invoices: !!invoicesCollection,\n              expenses: !!expensesCollection,\n              clients: !!clientsCollection,\n              transactions: !!transactionsCollection\n            }\n          });\n\n          // Revenue by month query - adapt based on available collections\n          revenueByMonth = [];\n          if (!(useTransactionsForAll && transactionsCollection)) {\n            _context.next = 69;\n            break;\n          }\n          _context.prev = 53;\n          _context.next = 56;\n          return transactionsCollection.find(_defineProperty(_defineProperty({}, typeField, {\n            $in: revenueTypes\n          }), dateField, {\n            $exists: true\n          })).limit(2).toArray();\n        case 56:\n          sampleRevenue = _context.sent;\n          console.log('Sample potential revenue transactions:', sampleRevenue);\n\n          // Modified query with simpler date matching and more flexible type detection\n          _context.next = 60;\n          return transactionsCollection.aggregate([{\n            $match: {\n              $and: [\n              // More flexible date matching - handle both string and date types\n              {\n                $expr: {\n                  $or: [\n                  // Handle date objects\n                  {\n                    $and: [{\n                      $gte: [{\n                        $ifNull: [\"$\".concat(dateField), new Date(0)]\n                      }, start]\n                    }, {\n                      $lte: [{\n                        $ifNull: [\"$\".concat(dateField), new Date(0)]\n                      }, end]\n                    }]\n                  },\n                  // Handle string dates by converting\n                  {\n                    $and: [{\n                      $gte: [{\n                        $ifNull: [{\n                          $toDate: \"$\".concat(dateField)\n                        }, new Date(0)]\n                      }, start]\n                    }, {\n                      $lte: [{\n                        $ifNull: [{\n                          $toDate: \"$\".concat(dateField)\n                        }, new Date(0)]\n                      }, end]\n                    }]\n                  }]\n                }\n              },\n              // More flexible revenue detection\n              {\n                $or: [// Match revenue types (case insensitive)\n                _defineProperty({}, typeField, {\n                  $in: revenueTypes\n                }), // Match by regex for partial matches\n                _defineProperty({}, typeField, {\n                  $regex: /income|revenue|payment/i\n                }), // Match positive amounts\n                _defineProperty({}, amountField, {\n                  $gt: 0\n                })]\n              }]\n            }\n          }, {\n            $group: {\n              _id: {\n                $dateToString: {\n                  format: \"%b\",\n                  date: {\n                    $cond: {\n                      \"if\": {\n                        $eq: [{\n                          $type: \"$\".concat(dateField)\n                        }, \"date\"]\n                      },\n                      then: \"$\".concat(dateField),\n                      \"else\": {\n                        $toDate: {\n                          $ifNull: [\"$\".concat(dateField), new Date()]\n                        }\n                      }\n                    }\n                  }\n                }\n              },\n              revenue: {\n                $sum: {\n                  $toDouble: {\n                    $ifNull: [\"$\".concat(amountField), 0]\n                  }\n                }\n              }\n            }\n          }, {\n            $project: {\n              _id: 0,\n              month: \"$_id\",\n              revenue: 1\n            }\n          }, {\n            $sort: {\n              month: 1\n            }\n          }]).toArray();\n        case 60:\n          revenueByMonth = _context.sent;\n          _context.next = 67;\n          break;\n        case 63:\n          _context.prev = 63;\n          _context.t0 = _context[\"catch\"](53);\n          console.error('Error querying revenue data:', _context.t0);\n          // Provide empty result if query fails\n          revenueByMonth = [];\n        case 67:\n          _context.next = 80;\n          break;\n        case 69:\n          if (!invoicesCollection) {\n            _context.next = 80;\n            break;\n          }\n          _context.prev = 70;\n          _context.next = 73;\n          return invoicesCollection.aggregate([{\n            $match: {\n              $and: [\n              // More flexible date matching - handle both string and date types\n              {\n                $expr: {\n                  $or: [\n                  // Handle date objects\n                  {\n                    $and: [{\n                      $gte: [{\n                        $ifNull: [\"$\".concat(dateField), new Date(0)]\n                      }, start]\n                    }, {\n                      $lte: [{\n                        $ifNull: [\"$\".concat(dateField), new Date(0)]\n                      }, end]\n                    }]\n                  },\n                  // Handle string dates by converting\n                  {\n                    $and: [{\n                      $gte: [{\n                        $ifNull: [{\n                          $toDate: \"$\".concat(dateField)\n                        }, new Date(0)]\n                      }, start]\n                    }, {\n                      $lte: [{\n                        $ifNull: [{\n                          $toDate: \"$\".concat(dateField)\n                        }, new Date(0)]\n                      }, end]\n                    }]\n                  }]\n                }\n              },\n              // If status field exists, match paid status\n              statusField ? _defineProperty({}, statusField, {\n                $in: ['paid', 'completed', 'success']\n              }) : {}]\n            }\n          }, {\n            $group: {\n              _id: {\n                $dateToString: {\n                  format: \"%b\",\n                  date: {\n                    $cond: {\n                      \"if\": {\n                        $eq: [{\n                          $type: \"$\".concat(dateField)\n                        }, \"date\"]\n                      },\n                      then: \"$\".concat(dateField),\n                      \"else\": {\n                        $toDate: {\n                          $ifNull: [\"$\".concat(dateField), new Date()]\n                        }\n                      }\n                    }\n                  }\n                }\n              },\n              revenue: {\n                $sum: {\n                  $toDouble: {\n                    $ifNull: [\"$\".concat(amountField), 0]\n                  }\n                }\n              }\n            }\n          }, {\n            $project: {\n              _id: 0,\n              month: \"$_id\",\n              revenue: 1\n            }\n          }, {\n            $sort: {\n              month: 1\n            }\n          }]).toArray();\n        case 73:\n          revenueByMonth = _context.sent;\n          _context.next = 80;\n          break;\n        case 76:\n          _context.prev = 76;\n          _context.t1 = _context[\"catch\"](70);\n          console.error('Error querying invoices for revenue:', _context.t1);\n          revenueByMonth = [];\n        case 80:\n          if (!(!revenueByMonth || revenueByMonth.length === 0)) {\n            _context.next = 93;\n            break;\n          }\n          _context.prev = 81;\n          console.log('No revenue data found, trying simplified query');\n          collection = transactionsCollection || invoicesCollection;\n          if (!collection) {\n            _context.next = 88;\n            break;\n          }\n          _context.next = 87;\n          return collection.aggregate([{\n            $match: _defineProperty({}, typeField, {\n              $in: revenueTypes\n            })\n          }, {\n            $group: {\n              _id: {\n                $dateToString: {\n                  format: \"%b\",\n                  date: {\n                    $cond: {\n                      \"if\": {\n                        $eq: [{\n                          $type: \"$\".concat(dateField)\n                        }, \"date\"]\n                      },\n                      then: \"$\".concat(dateField),\n                      \"else\": new Date()\n                    }\n                  }\n                }\n              },\n              revenue: {\n                $sum: {\n                  $toDouble: {\n                    $ifNull: [\"$\".concat(amountField), 0]\n                  }\n                }\n              }\n            }\n          }, {\n            $project: {\n              _id: 0,\n              month: \"$_id\",\n              revenue: 1\n            }\n          }, {\n            $sort: {\n              month: 1\n            }\n          }]).toArray();\n        case 87:\n          revenueByMonth = _context.sent;\n        case 88:\n          _context.next = 93;\n          break;\n        case 90:\n          _context.prev = 90;\n          _context.t2 = _context[\"catch\"](81);\n          console.error('Error with fallback revenue query:', _context.t2);\n        case 93:\n          console.log(\"Revenue by month (\".concat(revenueByMonth.length, \" results):\"), revenueByMonth);\n\n          // Remove the sample data generation code\n          // If we still don't have any revenue data after all attempts, provide sample data\n          if (!revenueByMonth || revenueByMonth.length === 0) {\n            console.log('No revenue data found, database may be empty');\n          }\n\n          // Ensure we have continuous month data for the revenue chart\n          if (revenueByMonth.length > 0) {\n            // Define standard month abbreviations to ensure correct order\n            monthOrder = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']; // Create a map of existing data\n            existingMonths = {};\n            revenueByMonth.forEach(function (item) {\n              existingMonths[item.month] = item.revenue;\n            });\n\n            // Determine the range of months in the data (start to end)\n            monthsInData = revenueByMonth.map(function (item) {\n              return item.month;\n            });\n            startMonthIndex = Math.min.apply(Math, _toConsumableArray(monthsInData.map(function (m) {\n              return monthOrder.indexOf(m);\n            })));\n            endMonthIndex = Math.max.apply(Math, _toConsumableArray(monthsInData.map(function (m) {\n              return monthOrder.indexOf(m);\n            }))); // Create a complete dataset with all months in range\n            completeRevenueData = [];\n            for (i = startMonthIndex; i <= endMonthIndex; i++) {\n              month = monthOrder[i];\n              completeRevenueData.push({\n                month: month,\n                revenue: existingMonths[month] || 0\n              });\n            }\n\n            // Replace the original data with the complete set\n            revenueByMonth = completeRevenueData;\n          }\n\n          // Expenses by category query\n          expensesByCategory = []; // Category filter - only apply to expenses\n          categoryMatch = category ? _defineProperty({}, categoryField, category) : {};\n          if (!(useTransactionsForAll && transactionsCollection)) {\n            _context.next = 104;\n            break;\n          }\n          _context.next = 101;\n          return transactionsCollection.aggregate([{\n            $match: {\n              $and: [\n              // Match date range\n              {\n                $or: [safelyMatchDates(dateField), _defineProperty({}, dateField, {\n                  $gte: start,\n                  $lte: end\n                })]\n              },\n              // Match expense type transactions\n              {\n                $or: [// Either the type field indicates expense\n                _defineProperty({}, typeField, {\n                  $in: expenseTypes\n                }), // Or amount is negative (if it's a number field)\n                _defineProperty({}, amountField, {\n                  $lt: 0\n                })]\n              },\n              // Apply category filter if provided\n              category ? categoryMatch : {}]\n            }\n          }, {\n            $group: {\n              _id: \"$\".concat(categoryField || 'category'),\n              amount: {\n                $sum: {\n                  $abs: {\n                    $toDouble: \"$\".concat(amountField)\n                  }\n                }\n              }\n            }\n          }, {\n            $project: {\n              _id: 0,\n              category: {\n                $ifNull: [\"$_id\", \"Uncategorized\"]\n              },\n              amount: 1\n            }\n          }, {\n            $sort: {\n              amount: -1\n            }\n          }]).toArray();\n        case 101:\n          expensesByCategory = _context.sent;\n          _context.next = 108;\n          break;\n        case 104:\n          if (!expensesCollection) {\n            _context.next = 108;\n            break;\n          }\n          _context.next = 107;\n          return expensesCollection.aggregate([{\n            $match: {\n              $and: [\n              // Match date range\n              {\n                $or: [safelyMatchDates(dateField), _defineProperty({}, dateField, {\n                  $gte: start,\n                  $lte: end\n                })]\n              },\n              // Apply category filter if provided\n              category ? categoryMatch : {}]\n            }\n          }, {\n            $group: {\n              _id: \"$\".concat(categoryField || 'category'),\n              amount: {\n                $sum: {\n                  $toDouble: \"$\".concat(amountField)\n                }\n              }\n            }\n          }, {\n            $project: {\n              _id: 0,\n              category: {\n                $ifNull: [\"$_id\", \"Uncategorized\"]\n              },\n              amount: 1\n            }\n          }, {\n            $sort: {\n              amount: -1\n            }\n          }]).toArray();\n        case 107:\n          expensesByCategory = _context.sent;\n        case 108:\n          console.log(\"Expenses by category (\".concat(expensesByCategory.length, \" results):\"), expensesByCategory);\n\n          // Profit and loss by month\n          profitLoss = [];\n          if (!(useTransactionsForAll && transactionsCollection)) {\n            _context.next = 117;\n            break;\n          }\n          _context.next = 113;\n          return transactionsCollection.aggregate([{\n            $match: {\n              $or: [safelyMatchDates(dateField), _defineProperty({}, dateField, {\n                $gte: start,\n                $lte: end\n              })]\n            }\n          }, {\n            $group: {\n              _id: {\n                month: {\n                  $dateToString: {\n                    format: \"%b\",\n                    date: {\n                      $cond: {\n                        \"if\": {\n                          $eq: [{\n                            $type: \"$\".concat(dateField)\n                          }, \"date\"]\n                        },\n                        then: \"$\".concat(dateField),\n                        \"else\": {\n                          $toDate: \"$\".concat(dateField)\n                        }\n                      }\n                    }\n                  }\n                },\n                type: {\n                  $cond: {\n                    \"if\": {\n                      $or: [{\n                        $in: [\"$\".concat(typeField), revenueTypes]\n                      }, {\n                        $gt: [\"$\".concat(amountField), 0]\n                      }]\n                    },\n                    then: \"revenue\",\n                    \"else\": \"expense\"\n                  }\n                }\n              },\n              amount: {\n                $sum: {\n                  $abs: {\n                    $toDouble: \"$\".concat(amountField)\n                  }\n                }\n              }\n            }\n          }, {\n            $group: {\n              _id: \"$_id.month\",\n              revenue: {\n                $sum: {\n                  $cond: [{\n                    $eq: [\"$_id.type\", \"revenue\"]\n                  }, \"$amount\", 0]\n                }\n              },\n              expenses: {\n                $sum: {\n                  $cond: [{\n                    $eq: [\"$_id.type\", \"expense\"]\n                  }, \"$amount\", 0]\n                }\n              }\n            }\n          }, {\n            $project: {\n              _id: 0,\n              month: \"$_id\",\n              revenue: 1,\n              expenses: 1,\n              profit: {\n                $subtract: [\"$revenue\", \"$expenses\"]\n              }\n            }\n          }, {\n            $sort: {\n              month: 1\n            }\n          }]).toArray();\n        case 113:\n          monthlyTransactions = _context.sent;\n          profitLoss = monthlyTransactions;\n          _context.next = 126;\n          break;\n        case 117:\n          // Use separate revenue and expense collections\n          revenueByMonthMap = {};\n          revenueByMonth.forEach(function (item) {\n            revenueByMonthMap[item.month] = item.revenue;\n          });\n          _context.next = 121;\n          return expensesCollection ? expensesCollection.aggregate([{\n            $match: {\n              $or: [safelyMatchDates(dateField), _defineProperty({}, dateField, {\n                $gte: start,\n                $lte: end\n              })]\n            }\n          }, {\n            $group: {\n              _id: {\n                $dateToString: {\n                  format: \"%b\",\n                  date: {\n                    $cond: {\n                      \"if\": {\n                        $eq: [{\n                          $type: \"$\".concat(dateField)\n                        }, \"date\"]\n                      },\n                      then: \"$\".concat(dateField),\n                      \"else\": {\n                        $toDate: \"$\".concat(dateField)\n                      }\n                    }\n                  }\n                }\n              },\n              expenses: {\n                $sum: {\n                  $toDouble: \"$\".concat(amountField)\n                }\n              }\n            }\n          }, {\n            $project: {\n              _id: 0,\n              month: \"$_id\",\n              expenses: 1\n            }\n          }, {\n            $sort: {\n              month: 1\n            }\n          }]).toArray() : [];\n        case 121:\n          expensesByMonthArray = _context.sent;\n          expensesByMonthMap = {};\n          expensesByMonthArray.forEach(function (item) {\n            expensesByMonthMap[item.month] = item.expenses;\n          });\n\n          // Combine revenue and expenses\n          months = _toConsumableArray(new Set([].concat(_toConsumableArray(Object.keys(revenueByMonthMap)), _toConsumableArray(Object.keys(expensesByMonthMap))))).sort();\n          profitLoss = months.map(function (month) {\n            var revenue = revenueByMonthMap[month] || 0;\n            var expenses = expensesByMonthMap[month] || 0;\n            return {\n              month: month,\n              revenue: revenue,\n              expenses: expenses,\n              profit: revenue - expenses\n            };\n          });\n        case 126:\n          console.log(\"Profit/Loss by month (\".concat(profitLoss.length, \" results):\"), profitLoss);\n\n          // Top clients by revenue\n          topClients = [];\n          if (!invoicesCollection) {\n            _context.next = 164;\n            break;\n          }\n          console.log('Using invoices collection to get top clients');\n          _context.prev = 130;\n          _context.next = 133;\n          return invoicesCollection.findOne({\n            client_name: {\n              $exists: true,\n              $ne: null\n            }\n          });\n        case 133:\n          clientNameSample = _context.sent;\n          if (!clientNameSample) {\n            _context.next = 141;\n            break;\n          }\n          console.log('Found direct client_name field in invoices');\n          // Use direct client_name field\n          _context.next = 138;\n          return invoicesCollection.aggregate([{\n            $match: {\n              $and: [{\n                $or: [safelyMatchDates(dateField), _defineProperty({}, dateField, {\n                  $gte: start,\n                  $lte: end\n                })]\n              },\n              // Ensure client_name field exists\n              {\n                client_name: {\n                  $exists: true,\n                  $ne: null\n                }\n              },\n              // If status field exists, match paid status\n              statusField ? _defineProperty({}, statusField, {\n                $in: ['paid', 'completed', 'success']\n              }) : {}]\n            }\n          }, {\n            $group: {\n              _id: \"$client_name\",\n              revenue: {\n                $sum: {\n                  $toDouble: \"$\".concat(amountField)\n                }\n              },\n              invoiceCount: {\n                $sum: 1\n              }\n            }\n          }, {\n            $project: {\n              _id: 0,\n              name: {\n                $ifNull: [\"$_id\", \"Unknown Client\"]\n              },\n              revenue: 1,\n              invoiceCount: 1\n            }\n          }, {\n            $sort: {\n              revenue: -1\n            }\n          }, {\n            $limit: 5\n          }]).toArray();\n        case 138:\n          topClients = _context.sent;\n          _context.next = 159;\n          break;\n        case 141:\n          _context.next = 143;\n          return invoicesCollection.findOne({\n            client_id: {\n              $exists: true\n            }\n          });\n        case 143:\n          clientIdSample = _context.sent;\n          _clientsCollection = getCollection(['clients', 'client', 'customers', 'customer']);\n          if (!(clientIdSample && _clientsCollection)) {\n            _context.next = 159;\n            break;\n          }\n          console.log('Using client_id with lookup to clients collection');\n          _context.prev = 147;\n          _context.next = 150;\n          return invoicesCollection.aggregate([{\n            $match: {\n              $and: [{\n                $or: [safelyMatchDates(dateField), _defineProperty({}, dateField, {\n                  $gte: start,\n                  $lte: end\n                })]\n              },\n              // Ensure client_id field exists\n              {\n                client_id: {\n                  $exists: true\n                }\n              },\n              // If status field exists, match paid status\n              statusField ? _defineProperty({}, statusField, {\n                $in: ['paid', 'completed', 'success']\n              }) : {}]\n            }\n          }, {\n            $lookup: {\n              from: \"clients\",\n              localField: \"client_id\",\n              foreignField: \"_id\",\n              as: \"client_info\"\n            }\n          }, {\n            $unwind: {\n              path: \"$client_info\",\n              preserveNullAndEmptyArrays: true\n            }\n          }, {\n            $group: {\n              _id: \"$client_id\",\n              name: {\n                $first: {\n                  $ifNull: [\"$client_info.name\", \"Unknown Client\"]\n                }\n              },\n              revenue: {\n                $sum: {\n                  $toDouble: \"$\".concat(amountField)\n                }\n              },\n              invoiceCount: {\n                $sum: 1\n              }\n            }\n          }, {\n            $project: {\n              _id: 0,\n              name: 1,\n              revenue: 1,\n              invoiceCount: 1\n            }\n          }, {\n            $sort: {\n              revenue: -1\n            }\n          }, {\n            $limit: 5\n          }]).toArray();\n        case 150:\n          topClients = _context.sent;\n          _context.next = 159;\n          break;\n        case 153:\n          _context.prev = 153;\n          _context.t3 = _context[\"catch\"](147);\n          console.error('Error with client lookup:', _context.t3);\n          // Fallback to simpler aggregation without lookup\n          _context.next = 158;\n          return invoicesCollection.aggregate([{\n            $match: {\n              $and: [{\n                $or: [safelyMatchDates(dateField), _defineProperty({}, dateField, {\n                  $gte: start,\n                  $lte: end\n                })]\n              },\n              // If status field exists, match paid status\n              statusField ? _defineProperty({}, statusField, {\n                $in: ['paid', 'completed', 'success']\n              }) : {}]\n            }\n          }, {\n            $group: {\n              _id: \"$client_id\",\n              revenue: {\n                $sum: {\n                  $toDouble: \"$\".concat(amountField)\n                }\n              },\n              invoiceCount: {\n                $sum: 1\n              }\n            }\n          }, {\n            $project: {\n              _id: 0,\n              name: {\n                $ifNull: [\"$_id\", \"Unknown Client\"]\n              },\n              revenue: 1,\n              invoiceCount: 1\n            }\n          }, {\n            $sort: {\n              revenue: -1\n            }\n          }, {\n            $limit: 5\n          }]).toArray();\n        case 158:\n          topClients = _context.sent;\n        case 159:\n          _context.next = 164;\n          break;\n        case 161:\n          _context.prev = 161;\n          _context.t4 = _context[\"catch\"](130);\n          console.error('Error querying invoices for top clients:', _context.t4);\n        case 164:\n          if (!(topClients.length === 0 && transactionsCollection)) {\n            _context.next = 202;\n            break;\n          }\n          console.log('Falling back to transaction collection for top clients');\n          _context.prev = 166;\n          // Use transactions collection for clients\n          // For transactions, try multiple fields that might contain client info\n          possibleClientFields = ['client_name', 'client', 'customer', 'payee', 'notes', 'description', 'memo']; // Find a field that exists in the data\n          fieldToUse = clientField;\n          if (fieldToUse) {\n            _context.next = 192;\n            break;\n          }\n          _iterator3 = _createForOfIteratorHelper(possibleClientFields);\n          _context.prev = 171;\n          _iterator3.s();\n        case 173:\n          if ((_step3 = _iterator3.n()).done) {\n            _context.next = 184;\n            break;\n          }\n          field = _step3.value;\n          _context.next = 177;\n          return transactionsCollection.findOne(_defineProperty({}, field, {\n            $exists: true,\n            $ne: null\n          }));\n        case 177:\n          sampleDoc = _context.sent;\n          if (!sampleDoc) {\n            _context.next = 182;\n            break;\n          }\n          fieldToUse = field;\n          console.log(\"Found client field in transactions: \".concat(field));\n          return _context.abrupt(\"break\", 184);\n        case 182:\n          _context.next = 173;\n          break;\n        case 184:\n          _context.next = 189;\n          break;\n        case 186:\n          _context.prev = 186;\n          _context.t5 = _context[\"catch\"](171);\n          _iterator3.e(_context.t5);\n        case 189:\n          _context.prev = 189;\n          _iterator3.f();\n          return _context.finish(189);\n        case 192:\n          // If still no field found, default to the most likely one\n          fieldToUse = fieldToUse || 'description';\n          console.log(\"Using field for client extraction: \".concat(fieldToUse));\n\n          // Use a simpler approach with grouping by the field directly\n          _context.next = 196;\n          return transactionsCollection.aggregate([{\n            $match: {\n              $and: [{\n                $or: [safelyMatchDates(dateField), _defineProperty({}, dateField, {\n                  $gte: start,\n                  $lte: end\n                })]\n              },\n              // Only include revenue transactions\n              {\n                $or: [_defineProperty({}, typeField, {\n                  $in: revenueTypes\n                }), _defineProperty({}, amountField, {\n                  $gt: 0\n                })]\n              }, // Make sure the field we're using exists\n              _defineProperty({}, fieldToUse, {\n                $exists: true,\n                $ne: null\n              })]\n            }\n          }, {\n            $group: {\n              _id: \"$\".concat(fieldToUse),\n              revenue: {\n                $sum: {\n                  $toDouble: \"$\".concat(amountField)\n                }\n              },\n              transactionCount: {\n                $sum: 1\n              }\n            }\n          }, {\n            $match: {\n              _id: _defineProperty({\n                $exists: true,\n                $ne: null\n              }, \"$ne\", \"\")\n            }\n          }, {\n            $project: {\n              _id: 0,\n              name: {\n                $ifNull: [\"$_id\", \"Unknown Client\"]\n              },\n              revenue: 1,\n              transactionCount: 1\n            }\n          }, {\n            $sort: {\n              revenue: -1\n            }\n          }, {\n            $limit: 5\n          }]).toArray();\n        case 196:\n          topClients = _context.sent;\n          _context.next = 202;\n          break;\n        case 199:\n          _context.prev = 199;\n          _context.t6 = _context[\"catch\"](166);\n          console.error('Error querying transactions for top clients:', _context.t6);\n        case 202:\n          // If we still have no clients, create sample data\n          if (!topClients || topClients.length === 0) {\n            console.log('No client data found, using default data for API response');\n            // Use some sample data if no clients were found\n            // This is better than returning an empty array\n            topClients = [{\n              name: 'Client data unavailable',\n              revenue: 0,\n              invoiceCount: 0\n            }];\n          }\n          console.log(\"Top clients (\".concat(topClients.length, \" results):\"), topClients);\n\n          // Get available categories for filtering\n          availableCategories = [];\n          if (!categoryField) {\n            _context.next = 211;\n            break;\n          }\n          categoryCollection = expensesCollection || transactionsCollection;\n          if (!categoryCollection) {\n            _context.next = 211;\n            break;\n          }\n          _context.next = 210;\n          return categoryCollection.distinct(categoryField);\n        case 210:\n          availableCategories = _context.sent;\n        case 211:\n          console.log('Available categories:', availableCategories);\n\n          // Create the data object\n          data = {\n            success: true,\n            data: {\n              revenueByMonth: revenueByMonth,\n              expensesByCategory: expensesByCategory,\n              profitLoss: profitLoss,\n              topClients: topClients,\n              availableCategories: availableCategories,\n              usingSampleData: false\n            },\n            source: 'mongodb',\n            database_status: 'connected',\n            dateRange: {\n              start: start.toISOString().split('T')[0],\n              end: end.toISOString().split('T')[0]\n            },\n            collectionsFound: {\n              invoices: !!invoicesCollection,\n              expenses: !!expensesCollection,\n              clients: !!clientsCollection,\n              transactions: !!transactionsCollection\n            },\n            fieldsUsed: {\n              date: dateField,\n              amount: amountField,\n              type: typeField,\n              status: statusField,\n              category: categoryField,\n              client: clientField\n            }\n          };\n          _context.next = 219;\n          break;\n        case 215:\n          _context.prev = 215;\n          _context.t7 = _context[\"catch\"](1);\n          console.error('MongoDB connection error:', _context.t7);\n          throw new Error(\"Database connection failed: \".concat(_context.t7.message));\n        case 219:\n          return _context.abrupt(\"return\", res.status(200).json(data));\n        case 222:\n          _context.prev = 222;\n          _context.t8 = _context[\"catch\"](0);\n          console.error('Error in reports API:', _context.t8);\n          // Return error to client\n          return _context.abrupt(\"return\", res.status(500).json({\n            success: false,\n            error: _context.t8.message,\n            message: 'Failed to retrieve report data from MongoDB'\n          }));\n        case 226:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[0, 222], [1, 215], [53, 63], [70, 76], [81, 90], [130, 161], [147, 153], [166, 199], [171, 186, 189, 192]]);\n  }));\n  return _handler.apply(this, arguments);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api-node)/./pages/api/reports.js\n");

/***/ }),

/***/ "(api-node)/./src/server/database/mongodb-config.js":
/*!***********************************************!*\
  !*** ./src/server/database/mongodb-config.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n/**\r\n * MongoDB connection configuration\r\n */\nvar _require = __webpack_require__(/*! mongodb */ \"mongodb\"),\n  MongoClient = _require.MongoClient;\nvar dotenv = __webpack_require__(/*! dotenv */ \"dotenv\");\ndotenv.config();\n\n// MongoDB connection string\nvar mongoURI = process.env.MONGODB_URI || 'mongodb://localhost:27017/fiscalfusion';\n\n// Create a MongoDB client\nvar client = new MongoClient(mongoURI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n  serverSelectionTimeoutMS: 5000\n});\n\n// Global connection status\nvar isConnected = false;\nvar db = null;\n\n/**\r\n * Connect to MongoDB\r\n */\nvar connect = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          if (isConnected) {\n            _context.next = 7;\n            break;\n          }\n          _context.next = 4;\n          return client.connect();\n        case 4:\n          console.log('Connected to MongoDB successfully');\n          db = client.db();\n          isConnected = true;\n        case 7:\n          return _context.abrupt(\"return\", db);\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          console.error('MongoDB connection error:', _context.t0);\n          isConnected = false;\n          throw _context.t0;\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[0, 10]]);\n  }));\n  return function connect() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\n/**\r\n * Get database connection\r\n */\nvar getDb = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          if (isConnected) {\n            _context2.next = 4;\n            break;\n          }\n          _context2.next = 3;\n          return connect();\n        case 3:\n          return _context2.abrupt(\"return\", _context2.sent);\n        case 4:\n          return _context2.abrupt(\"return\", db);\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n  return function getDb() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\n/**\r\n * Test database connection\r\n */\nvar testConnection = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return connect();\n        case 3:\n          _context3.next = 5;\n          return db.command({\n            ping: 1\n          });\n        case 5:\n          console.log('MongoDB connection test successful');\n          return _context3.abrupt(\"return\", true);\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error('MongoDB connection test failed:', _context3.t0);\n          isConnected = false;\n          return _context3.abrupt(\"return\", false);\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[0, 9]]);\n  }));\n  return function testConnection() {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\n/**\r\n * Close database connection\r\n */\nvar close = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!isConnected) {\n            _context4.next = 6;\n            break;\n          }\n          _context4.next = 3;\n          return client.close();\n        case 3:\n          isConnected = false;\n          db = null;\n          console.log('MongoDB connection closed');\n        case 6:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n  return function close() {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\n// Initialize connection\nconnect()[\"catch\"](console.error);\n\n// Handle process termination\nprocess.on('SIGINT', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n  return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n    while (1) switch (_context5.prev = _context5.next) {\n      case 0:\n        _context5.next = 2;\n        return close();\n      case 2:\n        process.exit(0);\n      case 3:\n      case \"end\":\n        return _context5.stop();\n    }\n  }, _callee5);\n})));\nmodule.exports = {\n  connect: connect,\n  getDb: getDb,\n  testConnection: testConnection,\n  close: close,\n  getConnectionStatus: function getConnectionStatus() {\n    return isConnected;\n  }\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaS1ub2RlKS8uL3NyYy9zZXJ2ZXIvZGF0YWJhc2UvbW9uZ29kYi1jb25maWcuanMiLCJtYXBwaW5ncyI6Ijs7OytDQUNBLHFKQUFBQSxtQkFBQSxZQUFBQSxvQkFBQSxXQUFBQyxDQUFBLFNBQUFDLENBQUEsRUFBQUQsQ0FBQSxPQUFBRSxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsU0FBQSxFQUFBQyxDQUFBLEdBQUFILENBQUEsQ0FBQUksY0FBQSxFQUFBQyxDQUFBLEdBQUFKLE1BQUEsQ0FBQUssY0FBQSxjQUFBUCxDQUFBLEVBQUFELENBQUEsRUFBQUUsQ0FBQSxJQUFBRCxDQUFBLENBQUFELENBQUEsSUFBQUUsQ0FBQSxDQUFBTyxLQUFBLEtBQUFDLENBQUEsd0JBQUFDLE1BQUEsR0FBQUEsTUFBQSxPQUFBQyxDQUFBLEdBQUFGLENBQUEsQ0FBQUcsUUFBQSxrQkFBQUMsQ0FBQSxHQUFBSixDQUFBLENBQUFLLGFBQUEsdUJBQUFDLENBQUEsR0FBQU4sQ0FBQSxDQUFBTyxXQUFBLDhCQUFBQyxPQUFBakIsQ0FBQSxFQUFBRCxDQUFBLEVBQUFFLENBQUEsV0FBQUMsTUFBQSxDQUFBSyxjQUFBLENBQUFQLENBQUEsRUFBQUQsQ0FBQSxJQUFBUyxLQUFBLEVBQUFQLENBQUEsRUFBQWlCLFVBQUEsTUFBQUMsWUFBQSxNQUFBQyxRQUFBLFNBQUFwQixDQUFBLENBQUFELENBQUEsV0FBQWtCLE1BQUEsbUJBQUFqQixDQUFBLElBQUFpQixNQUFBLFlBQUFBLE9BQUFqQixDQUFBLEVBQUFELENBQUEsRUFBQUUsQ0FBQSxXQUFBRCxDQUFBLENBQUFELENBQUEsSUFBQUUsQ0FBQSxnQkFBQW9CLEtBQUFyQixDQUFBLEVBQUFELENBQUEsRUFBQUUsQ0FBQSxFQUFBRyxDQUFBLFFBQUFLLENBQUEsR0FBQVYsQ0FBQSxJQUFBQSxDQUFBLENBQUFJLFNBQUEsWUFBQW1CLFNBQUEsR0FBQXZCLENBQUEsR0FBQXVCLFNBQUEsRUFBQVgsQ0FBQSxHQUFBVCxNQUFBLENBQUFxQixN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QSxPQUFBa0IsU0FBQSxDQUFBOUQsSUFBQTtNQUFBO0lBQUEsR0FBQTRELFFBQUE7RUFBQSxDQUU1QztFQUFBLGdCQVBLRixLQUFLQSxDQUFBO0lBQUEsT0FBQUMsS0FBQSxDQUFBdkMsS0FBQSxPQUFBRCxTQUFBO0VBQUE7QUFBQSxHQU9WOztBQUVEO0FBQ0FtQixPQUFPLENBQUMsQ0FBQyxTQUFNLENBQUNLLE9BQU8sQ0FBQzdCLEtBQUssQ0FBQzs7QUFFOUI7QUFDQWUsT0FBTyxDQUFDa0MsRUFBRSxDQUFDLFFBQVEsZUFBQWhELGlCQUFBLGVBQUEvRyxtQkFBQSxHQUFBb0YsSUFBQSxDQUFFLFNBQUE0RSxTQUFBO0VBQUEsT0FBQWhLLG1CQUFBLEdBQUF1QixJQUFBLFVBQUEwSSxVQUFBQyxTQUFBO0lBQUEsa0JBQUFBLFNBQUEsQ0FBQXJFLElBQUEsR0FBQXFFLFNBQUEsQ0FBQWhHLElBQUE7TUFBQTtRQUFBZ0csU0FBQSxDQUFBaEcsSUFBQTtRQUFBLE9BQ2J3RixLQUFLLENBQUMsQ0FBQztNQUFBO1FBQ2I3QixPQUFPLENBQUNzQyxJQUFJLENBQUMsQ0FBQyxDQUFDO01BQUM7TUFBQTtRQUFBLE9BQUFELFNBQUEsQ0FBQWxFLElBQUE7SUFBQTtFQUFBLEdBQUFnRSxRQUFBO0FBQUEsQ0FDakIsR0FBQztBQUVGSSxNQUFNLENBQUNDLE9BQU8sR0FBRztFQUNmL0IsT0FBTyxFQUFQQSxPQUFPO0VBQ1BRLEtBQUssRUFBTEEsS0FBSztFQUNMSyxjQUFjLEVBQWRBLGNBQWM7RUFDZE8sS0FBSyxFQUFMQSxLQUFLO0VBQ0xZLG1CQUFtQixFQUFFLFNBQXJCQSxtQkFBbUJBLENBQUE7SUFBQSxPQUFRbEMsV0FBVztFQUFBO0FBQ3hDLENBQUMiLCJzb3VyY2VzIjpbIkM6XFxVc2Vyc1xcbmFraWJcXE9uZURyaXZlXFxEZXNrdG9wXFxGaXNjYWxGdXNpb25cXHNyY1xcc2VydmVyXFxkYXRhYmFzZVxcbW9uZ29kYi1jb25maWcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIE1vbmdvREIgY29ubmVjdGlvbiBjb25maWd1cmF0aW9uXHJcbiAqL1xyXG5jb25zdCB7IE1vbmdvQ2xpZW50IH0gPSByZXF1aXJlKCdtb25nb2RiJyk7XHJcbmNvbnN0IGRvdGVudiA9IHJlcXVpcmUoJ2RvdGVudicpO1xyXG5cclxuZG90ZW52LmNvbmZpZygpO1xyXG5cclxuLy8gTW9uZ29EQiBjb25uZWN0aW9uIHN0cmluZ1xyXG5jb25zdCBtb25nb1VSSSA9IHByb2Nlc3MuZW52Lk1PTkdPREJfVVJJIHx8ICdtb25nb2RiOi8vbG9jYWxob3N0OjI3MDE3L2Zpc2NhbGZ1c2lvbic7XHJcblxyXG4vLyBDcmVhdGUgYSBNb25nb0RCIGNsaWVudFxyXG5jb25zdCBjbGllbnQgPSBuZXcgTW9uZ29DbGllbnQobW9uZ29VUkksIHtcclxuICB1c2VOZXdVcmxQYXJzZXI6IHRydWUsXHJcbiAgdXNlVW5pZmllZFRvcG9sb2d5OiB0cnVlLFxyXG4gIHNlcnZlclNlbGVjdGlvblRpbWVvdXRNUzogNTAwMFxyXG59KTtcclxuXHJcbi8vIEdsb2JhbCBjb25uZWN0aW9uIHN0YXR1c1xyXG5sZXQgaXNDb25uZWN0ZWQgPSBmYWxzZTtcclxubGV0IGRiID0gbnVsbDtcclxuXHJcbi8qKlxyXG4gKiBDb25uZWN0IHRvIE1vbmdvREJcclxuICovXHJcbmNvbnN0IGNvbm5lY3QgPSBhc3luYyAoKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGlmICghaXNDb25uZWN0ZWQpIHtcclxuICAgICAgYXdhaXQgY2xpZW50LmNvbm5lY3QoKTtcclxuICAgICAgY29uc29sZS5sb2coJ0Nvbm5lY3RlZCB0byBNb25nb0RCIHN1Y2Nlc3NmdWxseScpO1xyXG4gICAgICBkYiA9IGNsaWVudC5kYigpO1xyXG4gICAgICBpc0Nvbm5lY3RlZCA9IHRydWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZGI7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ01vbmdvREIgY29ubmVjdGlvbiBlcnJvcjonLCBlcnJvcik7XHJcbiAgICBpc0Nvbm5lY3RlZCA9IGZhbHNlO1xyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfVxyXG59O1xyXG5cclxuLyoqXHJcbiAqIEdldCBkYXRhYmFzZSBjb25uZWN0aW9uXHJcbiAqL1xyXG5jb25zdCBnZXREYiA9IGFzeW5jICgpID0+IHtcclxuICBpZiAoIWlzQ29ubmVjdGVkKSB7XHJcbiAgICByZXR1cm4gYXdhaXQgY29ubmVjdCgpO1xyXG4gIH1cclxuICByZXR1cm4gZGI7XHJcbn07XHJcblxyXG4vKipcclxuICogVGVzdCBkYXRhYmFzZSBjb25uZWN0aW9uXHJcbiAqL1xyXG5jb25zdCB0ZXN0Q29ubmVjdGlvbiA9IGFzeW5jICgpID0+IHtcclxuICB0cnkge1xyXG4gICAgYXdhaXQgY29ubmVjdCgpO1xyXG4gICAgLy8gUnVuIGEgc2ltcGxlIGNvbW1hbmQgdG8gdmVyaWZ5IHRoZSBjb25uZWN0aW9uIGlzIHdvcmtpbmdcclxuICAgIGF3YWl0IGRiLmNvbW1hbmQoeyBwaW5nOiAxIH0pO1xyXG4gICAgY29uc29sZS5sb2coJ01vbmdvREIgY29ubmVjdGlvbiB0ZXN0IHN1Y2Nlc3NmdWwnKTtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdNb25nb0RCIGNvbm5lY3Rpb24gdGVzdCBmYWlsZWQ6JywgZXJyb3IpO1xyXG4gICAgaXNDb25uZWN0ZWQgPSBmYWxzZTtcclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9XHJcbn07XHJcblxyXG4vKipcclxuICogQ2xvc2UgZGF0YWJhc2UgY29ubmVjdGlvblxyXG4gKi9cclxuY29uc3QgY2xvc2UgPSBhc3luYyAoKSA9PiB7XHJcbiAgaWYgKGlzQ29ubmVjdGVkKSB7XHJcbiAgICBhd2FpdCBjbGllbnQuY2xvc2UoKTtcclxuICAgIGlzQ29ubmVjdGVkID0gZmFsc2U7XHJcbiAgICBkYiA9IG51bGw7XHJcbiAgICBjb25zb2xlLmxvZygnTW9uZ29EQiBjb25uZWN0aW9uIGNsb3NlZCcpO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIEluaXRpYWxpemUgY29ubmVjdGlvblxyXG5jb25uZWN0KCkuY2F0Y2goY29uc29sZS5lcnJvcik7XHJcblxyXG4vLyBIYW5kbGUgcHJvY2VzcyB0ZXJtaW5hdGlvblxyXG5wcm9jZXNzLm9uKCdTSUdJTlQnLCBhc3luYyAoKSA9PiB7XHJcbiAgYXdhaXQgY2xvc2UoKTtcclxuICBwcm9jZXNzLmV4aXQoMCk7XHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgY29ubmVjdCxcclxuICBnZXREYixcclxuICB0ZXN0Q29ubmVjdGlvbixcclxuICBjbG9zZSxcclxuICBnZXRDb25uZWN0aW9uU3RhdHVzOiAoKSA9PiBpc0Nvbm5lY3RlZFxyXG59OyAiXSwibmFtZXMiOlsiX3JlZ2VuZXJhdG9yUnVudGltZSIsImUiLCJ0IiwiciIsIk9iamVjdCIsInByb3RvdHlwZSIsIm4iLCJoYXNPd25Qcm9wZXJ0eSIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiaSIsIlN5bWJvbCIsImEiLCJpdGVyYXRvciIsImMiLCJhc3luY0l0ZXJhdG9yIiwidSIsInRvU3RyaW5nVGFnIiwiZGVmaW5lIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwid3JhcCIsIkdlbmVyYXRvciIsImNyZWF0ZSIsIkNvbnRleHQiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJ0eXBlIiwiYXJnIiwiY2FsbCIsImgiLCJsIiwiZiIsInMiLCJ5IiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsInAiLCJkIiwiZ2V0UHJvdG90eXBlT2YiLCJ2IiwidmFsdWVzIiwiZyIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsImZvckVhY2giLCJfaW52b2tlIiwiQXN5bmNJdGVyYXRvciIsImludm9rZSIsIl90eXBlb2YiLCJyZXNvbHZlIiwiX19hd2FpdCIsInRoZW4iLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsIkVycm9yIiwiZG9uZSIsIm1ldGhvZCIsImRlbGVnYXRlIiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwiVHlwZUVycm9yIiwicmVzdWx0TmFtZSIsIm5leHQiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicHVzaCIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpc05hTiIsImxlbmd0aCIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImNvbnN0cnVjdG9yIiwibmFtZSIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImF3cmFwIiwiYXN5bmMiLCJQcm9taXNlIiwia2V5cyIsInJldmVyc2UiLCJwb3AiLCJwcmV2IiwiY2hhckF0Iiwic2xpY2UiLCJzdG9wIiwicnZhbCIsImhhbmRsZSIsImNvbXBsZXRlIiwiZmluaXNoIiwiX2NhdGNoIiwiZGVsZWdhdGVZaWVsZCIsImFzeW5jR2VuZXJhdG9yU3RlcCIsImdlbiIsInJlamVjdCIsIl9uZXh0IiwiX3Rocm93Iiwia2V5IiwiaW5mbyIsImVycm9yIiwiX2FzeW5jVG9HZW5lcmF0b3IiLCJmbiIsInNlbGYiLCJhcmdzIiwiYXJndW1lbnRzIiwiYXBwbHkiLCJlcnIiLCJ1bmRlZmluZWQiLCJfcmVxdWlyZSIsInJlcXVpcmUiLCJNb25nb0NsaWVudCIsImRvdGVudiIsImNvbmZpZyIsIm1vbmdvVVJJIiwicHJvY2VzcyIsImVudiIsIk1PTkdPREJfVVJJIiwiY2xpZW50IiwidXNlTmV3VXJsUGFyc2VyIiwidXNlVW5pZmllZFRvcG9sb2d5Iiwic2VydmVyU2VsZWN0aW9uVGltZW91dE1TIiwiaXNDb25uZWN0ZWQiLCJkYiIsImNvbm5lY3QiLCJfcmVmIiwiX2NhbGxlZSIsIl9jYWxsZWUkIiwiX2NvbnRleHQiLCJjb25zb2xlIiwibG9nIiwidDAiLCJnZXREYiIsIl9yZWYyIiwiX2NhbGxlZTIiLCJfY2FsbGVlMiQiLCJfY29udGV4dDIiLCJ0ZXN0Q29ubmVjdGlvbiIsIl9yZWYzIiwiX2NhbGxlZTMiLCJfY2FsbGVlMyQiLCJfY29udGV4dDMiLCJjb21tYW5kIiwicGluZyIsImNsb3NlIiwiX3JlZjQiLCJfY2FsbGVlNCIsIl9jYWxsZWU0JCIsIl9jb250ZXh0NCIsIm9uIiwiX2NhbGxlZTUiLCJfY2FsbGVlNSQiLCJfY29udGV4dDUiLCJleGl0IiwibW9kdWxlIiwiZXhwb3J0cyIsImdldENvbm5lY3Rpb25TdGF0dXMiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api-node)/./src/server/database/mongodb-config.js\n");

/***/ }),

/***/ "dotenv":
/*!*************************!*\
  !*** external "dotenv" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("dotenv");

/***/ }),

/***/ "mongodb":
/*!**************************!*\
  !*** external "mongodb" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("mongodb");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api-node)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Freports&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Creports.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();